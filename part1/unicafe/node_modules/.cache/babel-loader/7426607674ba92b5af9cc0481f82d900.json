{"ast":null,"code":"import _slicedToArray from \"/Users/bonnieyan/Desktop/Full_stack_2020/part1/unicafe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/bonnieyan/Desktop/Full_stack_2020/part1/unicafe/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom'; // import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nconst Display = props => {\n  return React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, props.text);\n};\n\nconst Button = props => {\n  return React.createElement(\"button\", {\n    onClick: props.handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, props.text);\n};\n\nconst Statistics = props => {\n  return React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, props.text, \" \"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, props.value));\n};\n\nconst Positive = props => {\n  return React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, props.text, \" \"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, props.value, props.perc, \" \"));\n};\n\nconst App = () => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        good = _useState2[0],\n        setGood = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        neutral = _useState4[0],\n        setNeutral = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        bad = _useState6[0],\n        setBad = _useState6[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Display, {\n    text: \"give feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => setGood(good + 1),\n    text: \"good\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => setNeutral(neutral + 1),\n    text: \"neutral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(Button, {\n    handleClick: () => setBad(bad + 1),\n    text: \"bad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(Display, {\n    text: \"Statistics\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(Statistics, {\n    text: \"good\",\n    value: good,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    text: \"neutral\",\n    value: neutral,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    text: \"bad\",\n    value: bad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    text: \"all\",\n    value: bad + neutral + good,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    text: \"average\",\n    value: (bad * -1 + neutral * 0 + good * 1) / (bad + neutral + good),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(Positive, {\n    text: \"positive\",\n    value: good / (bad + neutral + good) * 100,\n    perc: \"%\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();","map":{"version":3,"sources":["/Users/bonnieyan/Desktop/Full_stack_2020/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Display","props","text","Button","handleClick","Statistics","value","Positive","perc","App","good","setGood","neutral","setNeutral","bad","setBad","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nconst Display =(props) =>{\n    return (\n        <h1>{props.text}</h1>\n    )\n}\nconst Button = (props) =>{\n    return (\n        <button onClick = {props.handleClick}>\n            {props.text}\n        </button>\n    )\n}\n\nconst Statistics = (props) =>{\n    return (\n        <tr>\n            <td>{props.text} </td>\n            <td>{props.value}</td>\n        </tr>\n    )\n}\n\nconst Positive =(props)=>{\n    return (\n        <tr>\n            <td>{props.text} </td>\n            <td>{props.value}{props.perc} </td>\n        </tr>\n    )\n}\n\nconst App = () =>{\n    const [good, setGood] = useState(0);\n    const [neutral, setNeutral] = useState(0);\n    const [bad, setBad] = useState(0);\n\n\n    return (\n        <div>\n            <Display text='give feedback'/>\n            <Button handleClick={()=>setGood(good+1)} text=\"good\" />\n            <Button handleClick={()=>setNeutral(neutral+1)} text=\"neutral\" />\n            <Button handleClick={()=>setBad(bad+1)} text=\"bad\" />\n            <Display text ='Statistics'/>\n            <table>            \n                <Statistics text ='good' value = {good} />\n                <Statistics text ='neutral' value = {neutral} />\n                <Statistics text ='bad' value = {bad} />\n                <Statistics text ='all' value = {bad + neutral + good} />\n                <Statistics text ='average' value = {(bad*(-1) + neutral*0 + good*1)/(bad+neutral+good)} />\n                <Positive text ='positive' value = {good /(bad + neutral + good)*100} perc='%' />\n            </table>\n        </div>\n    )\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}